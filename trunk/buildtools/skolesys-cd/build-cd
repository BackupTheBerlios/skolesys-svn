#! /usr/bin/python

import re,grp,os,ldap
from sys import argv,exit

# Check root privilegdes
if not os.getuid()==0:
	print "This command needs requires priviledges"
	exit(0)
	
from optparse import OptionParser

if __name__=='__main__':
	commands = {'extract': 'Extract a cd image to a new cd-project',
		'edit': 'Change root to a cd project',
		'create': 'Create a cd image from a cd-project'}

	shell_cmd_name = os.path.split(argv[0])[-1:][0]
	
	usage = "usage: %s command [options] arg1, arg2" % shell_cmd_name
	if len(argv)<2 or not commands.has_key(argv[1]):
		print usage
		print 
		print "Commands:"
		for cmd,desc in commands.items():
			print '%s - %s' % (cmd,desc)
		exit(0)
		
	cmd = argv[1]
	
	parser = OptionParser(usage=usage)

	if cmd == "extract":
		parser.set_usage("usage: %s %s project_name" % (shell_cmd_name,cmd))
		(options, args) = parser.parse_args()
		if len(args)<2:
			print parser.usage
			exit(0)
			
		cdproject = args[1]
		if not os.path.exists('%s_cdinfo.py' % cdproject):
			print "The cdinfo file %s_cdinfo.py does not exist." % cdproject
			print parser.usage
			exit(0)
		cdinfo = __import__('%s_cdinfo' % cdproject)
		if not dir(cdinfo).count('version'):
			cdinfo.version = ''
		
		if not os.path.exists(cdinfo.iso_base):
			print "cd image %s does not exist." % cdinfo.iso_base
			print parser.usage
			exit(0)
		if os.path.exists('%s' % cdproject):
			answer = raw_input("The cd project: '%s' already exists. Do you wish to delete it and continue? (y/n)" % cdproject)
			if not answer.lower() == 'y':
				exit(0)
			print "Deleting files..."
			os.system('sudo rm %s -R -f' % cdproject)
		os.system('mkdir -p %s' % cdproject)
		os.system('sudo mount -t iso9660 -o loop %s /cdrom' % cdinfo.iso_base)
		os.system('mkdir %s/livecd' % cdproject)
		print "Copying the cd image to the local filesystem..."
		os.system('cp -a /cdrom/. %s/livecd' % cdproject)
		os.system('chmod -R u+w %s/livecd' % cdproject)
		os.system('sudo umount /cdrom')
		os.system('mkdir %s/old' % cdproject)
		os.system('sudo mount -t squashfs -o loop,ro %s/livecd/casper/filesystem.squashfs %s/old' % (cdproject,cdproject))
		print "Creating a squashfs file..."
		os.system('sudo dd if=/dev/zero of=%s/ubuntu-fs.ext2 bs=1M count=2147' % cdproject)
		print "Formatting the squashfs file as ext2..."
		os.system('sudo mke2fs -F %s/ubuntu-fs.ext2' % cdproject)
		os.system('mkdir %s/new' % cdproject)
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (cdproject,cdproject))

		print "Copying files to squashfs..."
		os.system('sudo cp -a %s/old/. %s/new' % (cdproject,cdproject))
		os.system('sudo cp /etc/resolv.conf %s/new/etc/' % cdproject)
		
		
		if os.path.exists('%s_%s.tar.gz' % (cdproject,cdinfo.version)):
			os.system('cp %s_%s.tar.gz %s' % (cdproject,cdinfo.version,cdproject))
			curdir = os.getcwd()
			os.chdir(cdproject)
			os.system('tar xvzf %s_%s.tar.gz' % (cdproject,cdinfo.version))
			os.chdir(curdir)
		
		if dir(cdinfo).count('post_extract_script'):
			curdir = os.getcwd()
			os.chdir(cdproject)
			print "Executing user-defined post-extract-scripts..."
			f=open('post_extract_script' ,'w')
			f.write(cdinfo.post_extract_script)
			f.close()
			os.system('chmod 755 post_extract_script')
			os.system('./post_extract_script')
			os.chdir(curdir)
		
		if dir(cdinfo).count('chroot_script'):
			print "Executing user-defined chroot-script on squashfs..."
			f=open('%s/new/tmp/chroot_script' % cdproject,'w')
			f.write(cdinfo.chroot_script)
			f.close()
			os.system('sudo chmod 755 %s/new/tmp/chroot_script' % cdproject)
			os.system('sudo chroot %s/new /tmp/chroot_script' % cdproject)
		
		# Unmount all
		os.system('sudo rm %s/new/etc/resolv.conf' % cdproject)
		os.system('sudo umount %s/old' % cdproject)
		os.system('sudo umount %s/new' % cdproject)
		print "Run '%s edit %s' to start editing the cd project" % (shell_cmd_name,cdproject)

	if cmd == "edit":
		parser.set_usage("usage: %s %s project-name" % (shell_cmd_name,cmd))
		(options, args) = parser.parse_args()
		if len(args)<2:
			print parser.usage
			exit(0)
		
		cdproject = args[1]
		if not os.path.exists(cdproject):
			print "The cd project %s does not exist." % cdproject
			print parser.usage
			exit(0)
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (cdproject,cdproject))
		os.system('sudo cp /etc/resolv.conf %s/new/etc/' % cdproject)
		os.system('sudo mount -t proc -o bind /proc %s/new/proc' % cdproject)
		os.system('sudo mount -t sysfs -o bind /sys %s/new/sys' % cdproject)
		f=open('chroot_cmd','w')
		f.write('sudo chroot %s/new /bin/bash\n' % cdproject)
		f.close()
		os.system('chmod 755 chroot_cmd')
		os.system('konsole -e "./chroot_cmd"')
		os.system('rm chroot_cmd')
		os.system('sudo umount %s/new/sys' % cdproject)
		os.system('sudo umount %s/new/proc' % cdproject)
		os.system('sudo rm %s/new/etc/resolv.conf' % cdproject)
		os.system('sudo umount %s/new' % cdproject)
		print "Run '%s create %s' to create a new cd image from the cd project" % (shell_cmd_name,cdproject)
	
	if cmd == "create":
		parser.set_usage("usage: %s %s project-name" % (shell_cmd_name,cmd))
		(options, args) = parser.parse_args()
		if len(args)<2:
			print parser.usage
			exit(0)
			
		cdproject = args[1]
		if not os.path.exists('%s_cdinfo.py' % cdproject):
			print "The cdinfo file %s_cdinfo.py does not exist." % cdproject
			print parser.usage
			exit(0)
		cdinfo = __import__('%s_cdinfo' % cdproject)
		if not dir(cdinfo).count('version'):
			cdinfo.version = ''
		
		if not os.path.exists(cdproject):
			print "The cd project %s does not exist." % args[1]
			print parser.usage
			exit(0)
			
		# mount the altered squashfs
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (cdproject,cdproject))
		
		# Fetch the modified packagelist
		f = os.popen("sudo chroot %s/new dpkg-query -W --showformat='${Package} ${Version}\n'" % cdproject)
		package_list = f.readlines()
		f.close()
		
		# Write the new filesystem.manifest for the livecd
		f = open("%s/livecd/casper/filesystem.manifest" % cdproject, 'w')
		f.write(''.join(package_list))
		f.close()
		
		# Now maybe rule out packages for the installation filesystem.manifest (filesystem.manifest-desktop)
		rx_rmlist = []
		if dir(cdinfo).count('inst_manifest_excludes'):
			rx_rmlist = cdinfo.inst_manifest_excludes.split("\n")
		rmlist = {}
		for rxtest in rx_rmlist:
			rx = re.compile(rxtest.strip())
			if rx:
				for p in package_list:
					if rx.match(p):
						rmlist[p] = 1
			else:
				print "Warning: The string %s could not be compiled as a regular expression." % rxtest
		
		if not len(rmlist):
			print "No packages have been ruled out in the installation manifest (filesystem.manifest == filesystem.manifest-desktop)"
		else: 
			print "Following packages are ruled out in the installation manifest:\n%s" % ''.join(rmlist.keys())
		for p in rmlist.keys():
			package_list.remove(p)
		
		# Write the new filesystem.manifest for the livecd
		f = open("%s/livecd/casper/filesystem.manifest-desktop" % cdproject, 'w')
		f.write(''.join(package_list))
		f.close()
		
		print "Creating filesystem.squashfs..."
		os.system('sudo rm %s/livecd/casper/filesystem.squashfs' % cdproject)
		os.system('sudo mksquashfs %s/new %s/livecd/casper/filesystem.squashfs' % (cdproject,cdproject))
		
		cwd = os.getcwd()
		os.chdir('%s/livecd' % cdproject)
		print "Creating md5sum.txt..."
		f = os.popen('find . -type f -print0 | xargs -0 sudo md5sum')
		md5sums = f.readlines()
		f.close()
		os.system('sudo mkisofs -r -V "%s" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ../../%s .' % \
			(cdinfo.volume_id.replace('<ver>',cdinfo.version),cdinfo.iso_product.replace('<ver>',cdinfo.version)))
		os.chdir(cwd)
		f = open("%s/livecd/md5sum.txt" % cdproject, 'w')
		f.write(''.join(md5sums))
		f.close()
		
		# unmount the altered squashfs for the last time (hopefully)
		os.system('sudo umount %s/new' % cdproject)

