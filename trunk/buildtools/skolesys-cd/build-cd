#! /usr/bin/python

import re,grp,os,ldap
from sys import argv,exit

# Check root privilegdes
if not os.getuid()==0:
	print "This command needs requires priviledges"
	exit(0)
	
from optparse import OptionParser

if __name__=='__main__':
	commands = {'extract': 'Extract a cd image to a new cd-project',
		'edit': 'Change root to a cd project',
		'create': 'Create a cd image from a cd-project'}

	shell_cmd_name = os.path.split(argv[0])[-1:][0]
	
	usage = "usage: %s command [options] arg1, arg2" % shell_cmd_name
	if len(argv)<2 or not commands.has_key(argv[1]):
		print usage
		print 
		print "Commands:"
		for cmd,desc in commands.items():
			print '%s - %s' % (cmd,desc)
		exit(0)
		
	cmd = argv[1]
	
	parser = OptionParser(usage=usage)

	if cmd == "extract":
		parser.set_usage("usage: %s %s iso-file project-name" % (shell_cmd_name,cmd))
		(options, args) = parser.parse_args()
		if len(args)<3:
			print parser.usage
			exit(0)
		if not os.path.exists(args[1]):
			print "cd image %s does not exist." % args[1]
			print parser.usage
			exit(0)
		if os.path.exists('%s' % args[2]):
			answer = raw_input("There exists a cd project with the name %s. Do you wish to continue? (y/n)" % args[2])
			if not answer.lower() == 'y':
				exit(0)
			print "Deleting files..."
			os.system('sudo rm %s -R -f' % args[2])
		os.system('mkdir -p %s' % args[2])
		os.system('sudo mount -t iso9660 -o loop %s /cdrom' % args[1])
		os.system('mkdir %s/livecd' % args[2])
		print "Copying the cd image to the local filesystem..."
		os.system('cp -a /cdrom/. %s/livecd' % args[2])
		os.system('chmod -R u+w %s/livecd' % args[2])
		os.system('sudo umount /cdrom')
		os.system('mkdir %s/old' % args[2])
		os.system('sudo mount -t squashfs -o loop,ro %s/livecd/casper/filesystem.squashfs %s/old' % (args[2],args[2]))
		print "Creating a squashfs file..."
		os.system('sudo dd if=/dev/zero of=%s/ubuntu-fs.ext2 bs=1M count=2147' % args[2])
		print "Formatting the squashfs file as ext2..."
		os.system('sudo mke2fs -F %s/ubuntu-fs.ext2' % args[2])
		os.system('mkdir %s/new' % args[2])
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (args[2],args[2]))

		print "Copying files to squashfs..."
		os.system('sudo cp -a %s/old/. %s/new' % (args[2],args[2]))
		os.system('sudo umount %s/old' % args[2])
		os.system('sudo umount %s/new' % args[2])
		print "Run '%s edit %s' to start editing the cd project" % (shell_cmd_name,args[2])

	if cmd == "edit":
		parser.set_usage("usage: %s %s project-name" % (shell_cmd_name,cmd))
		(options, args) = parser.parse_args()
		if len(args)<2:
			print parser.usage
			exit(0)
		if not os.path.exists(args[1]):
			print "The cd project %s does not exist." % args[1]
			print parser.usage
			exit(0)
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (args[1],args[1]))
		os.system('sudo cp /etc/resolv.conf %s/new/etc/' % args[1])
		os.system('sudo mount -t proc -o bind /proc %s/new/proc' % args[1])
		os.system('sudo mount -t sysfs -o bind /sys %s/new/sys' % args[1])
		f=open('chroot_cmd','w')
		f.write('sudo chroot %s/new /bin/bash\n' % args[1])
		f.close()
		os.system('chmod 755 chroot_cmd')
		os.system('konsole -e "./chroot_cmd"')
		os.system('rm chroot_cmd')
		os.system('sudo umount %s/new/sys' % args[1])
		os.system('sudo umount %s/new/proc' % args[1])
		os.system('sudo rm %s/new/etc/resolv.conf' % args[1])
		os.system('sudo umount %s/new' % args[1])
		print "Run '%s create %s' to create a new cd image from the cd project" % (shell_cmd_name,args[1])
	
	if cmd == "create":
		parser.set_usage("usage: %s %s project-name" % (shell_cmd_name,cmd))
		parser.add_option("-e", "--excludefile", dest="excludefile",default=None,
			help="a file of regular expressions used to exclude packages from the cd-installation manifest", metavar="SKOLESYS_EXCLUDEFILE")
		(options, args) = parser.parse_args()
		if len(args)<2:
			print parser.usage
			exit(0)
		if not os.path.exists(args[1]):
			print "The cd project %s does not exist." % args[1]
			print parser.usage
			exit(0)
			
		# mount the altered squashfs
		os.system('sudo mount -o loop %s/ubuntu-fs.ext2 %s/new' % (args[1],args[1]))
		
		# Fetch the modified packagelist
		f = os.popen("sudo chroot %s/new dpkg-query -W --showformat='${Package} ${Version}\n'" % args[1])
		package_list = f.readlines()
		f.close()
		
		# Write the new filesystem.manifest for the livecd
		f = open("%s/livecd/casper/filesystem.manifest" % args[1], 'w')
		f.write(''.join(package_list))
		f.close()
		
		# Now maybe rule out packages for the installation filesystem.manifest (filesystem.manifest-desktop)
		rx_rmlist = []
		if options.excludefile:
			if os.path.exists(options.excludefile):
				f = open(options.excludefile)
				rx_rmlist = f.readlines()
				f.close()
			else:
				print "Warning: The excludefile %s does not exist or you don't have permission to read it." % options.excludefile
			
		rmlist = {}
		for rxtest in rx_rmlist:
			rx = re.compile(rxtest.strip())
			if rx:
				for p in package_list:
					if rx.match(p):
						rmlist[p] = 1
			else:
				print "Warning: The string %s could not be compiled as a regular expression." % rxtest
		
		if not len(rmlist):
			print "No packages have been ruled out in the installation manifest (filesystem.manifest == filesystem.manifest-desktop)"
		else: 
			print "Following packages are ruled out in the installation manifest:\n%s" % ''.join(rmlist.keys())
		for p in rmlist.keys():
			package_list.remove(p)
		
		# Write the new filesystem.manifest for the livecd
		f = open("%s/livecd/casper/filesystem.manifest-desktop" % args[1], 'w')
		f.write(''.join(package_list))
		f.close()
		
		print "Creating filesystem.squashfs..."
		#os.system('sudo rm %s/livecd/casper/filesystem.squashfs' % args[1])
		#os.system('sudo mksquashfs %s/new %s/livecd/casper/filesystem.squashfs' % (args[1],args[1]))
		
		cwd = os.getcwd()
		os.chdir('%s/livecd' % args[1])
		print "Creating md5sum.txt..."
		f = os.popen('find . -type f -print0 | xargs -0 sudo md5sum')
		md5sums = f.readlines()
		f.close()
		os.system('sudo mkisofs -r -V "%s" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ../../%s .' % ('SkoleSYS LTSP Pilot ver 0.5','skolesys-ltsp_0.5.iso'))
		os.chdir(cwd)
		f = open("%s/livecd/md5sum.txt" % args[1], 'w')
		f.write(''.join(md5sums))
		f.close()
		
		# unmount the altered squashfs for the last time (hopefully)
		os.system('sudo umount %s/new' % args[1])

