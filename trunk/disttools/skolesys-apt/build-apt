#!/usr/bin/python

import sys,md5,sha,os
from optparse import OptionParser
 
usage = "Usage: create_repository codename"
parser = OptionParser(usage=usage)

md5list = []
sha1list = []

if __name__=='__main__':
	
	parser.add_option("-g", "--gpgid", dest="gpgid",default=None,
		help="Use a certain secret gpg key to sign the repository.", metavar="SKOLESYS_GPGID")
        parser.add_option("--passphrase", dest="passphrase",default=None,
                help="Pass a passphrase for the gpgid.", metavar="SKOLESYS_PASSPHRASE")
	
	(options, args) = parser.parse_args()

	if len(args)==0:
		codename = raw_input("Which codename is to be build: ")	
	else:
		codename = args[0]

	# Load debinfo
	if not os.path.exists('%s_aptinfo.py' % codename):
		print "ERROR: %s_aptinfo.py is missing" % codename
		sys.exit(0)
	aptinfo = __import__('%s_aptinfo' % codename)

	# Clean workspaces	
	if os.path.exists('dists'):
		os.system('sudo rm dists -R -f')
	os.makedirs('dists/%s' % codename)

	if os.path.exists('pool'):
		os.system('sudo rm pool -R -f')

	component_list = os.listdir(codename)
	arch_list = []
	for component in component_list:
		if os.path.isdir('%s/%s' % (codename,component)):
			component_archs = os.listdir('%s/%s' % (codename,component))
			for arch in component_archs:
				if not arch_list.count(arch) and \
				   os.path.isdir('%s/%s/%s' % (codename,component,arch)):
					arch_list += [arch]
		else:
			component_list.pop(component)
	
	for component in component_list:
		for arch in arch_list:
			if not os.path.exists('%s/%s/%s' % (codename,component,arch)):
				# this component did not contain specific packages for that architechture
				continue
			os.system('sudo rm pool -R -f')
			os.mkdir('pool')
			os.system("ln -s ../%s/%s/%s pool/%s " % (codename,component,arch,component))
			
			if not os.path.exists('real_pool/%s' % component):
				os.makedirs('real_pool/%s' % component)
			os.system("cp %s/%s/%s/* real_pool/%s -v" % (codename,component,arch,component))
			if arch=='source':
				dist_packages_dir = 'dists/%s/%s/%s' % (codename,component,arch)
				os.makedirs(dist_packages_dir)
				os.system('sudo dpkg-scansources pool/%s /dev/null > %s/Sources' % (component,dist_source_dir))
				os.system('tar cjf %s/Sources.bz2 %s/Sources' % (dist_source_dir,dist_source_dir))
				os.system('gzip -9c %s/Sources > %s/Sources.gz' % (dist_source_dir,dist_source_dir))
			else:
				dist_binary_dir = 'dists/%s/%s/binary-%s' % (codename,component,arch)
				os.makedirs(dist_binary_dir)
				os.system('sudo dpkg-scanpackages pool/%s /dev/null > %s/Packages' % (component,dist_binary_dir))
				os.system('tar cjf %s/Packages.bz2 %s/Packages' % (dist_binary_dir,dist_binary_dir))
				os.system('gzip -9c %s/Packages > %s/Packages.gz' % (dist_binary_dir,dist_binary_dir))
	
	os.system('sudo rm pool -R -f')
	os.system('sudo mv real_pool pool')

	f = open('Release_template')
	buf = f.read()
	f.close()

	for tag in aptinfo.release_info.keys():
		buf = buf.replace('<%s>' % tag, aptinfo.release_info[tag])
	buf = buf.replace('<components>',' '.join(component_list))
	buf = buf.replace('<architechtures>',' '.join(arch_list))

	# Determin the gpg ID to use
	# The ID is chosen by the following priority:
	# 1. -g or --gpgid (if set)
	# 2. use the gpgid from the aptinfo file (if set)
	# 3. use the environment variable SKOLESYS_GPGID
	# 4. If none of the above are set skolesys-apt try to sign with the default gpg key-pair
	gpgid = None
	if os.environ.has_key('SKOLESYS_GPGID'):
		# 3. priority
		gpgid = os.environ['SKOLESYS_GPGID']
	if dir(aptinfo).count('gpgid'):
		# 2. priority
		gpgid = aptinfo.gpgid
	if options.gpgid != None:
		# 1. priority
		gpgid = options.gpgid
	print gpgid
	
	def digest(args,dirname,fnames):
		global md5list,sha1list
		for fn in fnames:
			if os.path.isdir(os.path.join(dirname,fn)):
				continue
			fsize = os.path.getsize(os.path.join(dirname,fn))
			f = open(os.path.join(dirname,fn))
			bytes=f.read()
			md5sum = md5.md5(bytes).hexdigest()
			sha1 = sha.sha(bytes).hexdigest()
			f.close()
			del bytes
			md5list += [' %s%17.17s %s' % (md5sum,fsize,os.path.sep.join(os.path.join(dirname,fn).split(os.path.sep)[2:]))]
			sha1list += [' %s%17.17s %s' % (sha1,fsize,os.path.sep.join(os.path.join(dirname,fn).split(os.path.sep)[2:]))]

	os.path.walk('dists/%s' % codename,digest,None)

	buf = buf.replace('<md5sum>','\n'.join(md5list))
	buf = buf.replace('<sha1>','\n'.join(sha1list))

	f = open('dists/%s/Release' % codename, 'w')
	f.write(buf)
	f.close()

	if options.passphrase:
		f=open('passphrase','w')
		f.write("%s\n" % options.passphrase)
		f.close()
		if not gpgid:
			os.system('gpg --batch --passphrase-fd 0 -abs -o dists/%s/Release.gpg dists/%s/Release < passphrase' % (codename,codename))
		else:
			os.system('gpg --batch --passphrase-fd 0 -abs --default-key %s -o dists/%s/Release.gpg dists/%s/Release < passphrase' % (gpgid,codename,codename))
		os.remove('passphrase')

	else:
		if not gpgid:
			os.system('gpg -abs -o dists/%s/Release.gpg dists/%s/Release' % (codename,codename))
		else:
			os.system('gpg -abs --default-key %s -o dists/%s/Release.gpg dists/%s/Release' % (gpgid,codename,codename))
	
